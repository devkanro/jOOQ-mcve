/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.mysql.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.mysql.tables.Email
import org.jooq.mcve.kotlin.mysql.tables.interfaces.IEmail


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EmailRecord private constructor() : UpdatableRecordImpl<EmailRecord>(Email.EMAIL), Record3<Int?, String?, String?>, IEmail {

    open override var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open override var from: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open override var to: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
    override fun valuesRow(): Row3<Int?, String?, String?> = super.valuesRow() as Row3<Int?, String?, String?>
    override fun field1(): Field<Int?> = Email.EMAIL.ID
    override fun field2(): Field<String?> = Email.EMAIL.FROM
    override fun field3(): Field<String?> = Email.EMAIL.TO
    override fun component1(): Int? = id
    override fun component2(): String = from
    override fun component3(): String = to
    override fun value1(): Int? = id
    override fun value2(): String = from
    override fun value3(): String = to

    override fun value1(value: Int?): EmailRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): EmailRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): EmailRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?): EmailRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IEmail) {
        id = from.id
        from = from.from
        to = from.to
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EmailRecord
     */
    constructor(id: Int? = null, from: String, to: String): this() {
        this.id = id
        this.from = from
        this.to = to
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EmailRecord
     */
    constructor(value: org.jooq.mcve.kotlin.mysql.tables.pojos.Email?): this() {
        if (value != null) {
            this.id = value.id
            this.from = value.from
            this.to = value.to
            resetChangedOnNotNull()
        }
    }
}
