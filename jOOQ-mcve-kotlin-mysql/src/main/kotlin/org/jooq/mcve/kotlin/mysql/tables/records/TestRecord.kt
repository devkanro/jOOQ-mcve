/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.mysql.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.mysql.tables.Test
import org.jooq.mcve.kotlin.mysql.tables.interfaces.ITest


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestRecord private constructor() : UpdatableRecordImpl<TestRecord>(Test.TEST), Record2<Int?, Int?>, ITest {

    open override var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open override var cd: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>
    override fun valuesRow(): Row2<Int?, Int?> = super.valuesRow() as Row2<Int?, Int?>
    override fun field1(): Field<Int?> = Test.TEST.ID
    override fun field2(): Field<Int?> = Test.TEST.CD
    override fun component1(): Int? = id
    override fun component2(): Int? = cd
    override fun value1(): Int? = id
    override fun value2(): Int? = cd

    override fun value1(value: Int?): TestRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): TestRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?): TestRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: ITest) {
        id = from.id
        cd = from.cd
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised TestRecord
     */
    constructor(id: Int? = null, cd: Int? = null): this() {
        this.id = id
        this.cd = cd
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised TestRecord
     */
    constructor(value: org.jooq.mcve.kotlin.mysql.tables.pojos.Test?): this() {
        if (value != null) {
            this.id = value.id
            this.cd = value.cd
            resetChangedOnNotNull()
        }
    }
}
